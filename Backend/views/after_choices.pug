doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Weather Dashboard
        // CSS and javascript that is used throughout
        link(href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css", rel="stylesheet")
        link(rel="stylesheet" href="/css/formLayout.css")
        script(type="text/javascript" src="/js/after_choices.js")

    body
        .container(style="background-color: lightgray;")
            // Includes the header.pug to be used
            include header
            // Checks if the data is greater then 0 and then iterates through it.
            if weatherData.length > 0
                .row.mt-4
                    .col-md-8
                        // Loop through weatherData but only render the first city's data (the api).
                        each data, index in weatherData
                            if index === 0
                                if data.error
                                    div.alert.alert-danger City: #{data.cityName} - Error: #{data.error}
                                else
                                    div
                                        //Displays all the key aspects of the data that is fetched from the API.
                                        h3 City: #{data.cityName}
                                        p Temperature: #{Math.round(data.temperature)} #{selectedUnit === 'metric' ? '°C' : '°F'}
                                        p Wind Speed: #{data.wind} m/s
                                        p Humidity: #{data.humidity}%
                                        p Time: #{data.time}
                                        // Show the current weather icon based on the weather data.
                                        img(src=`http://openweathermap.org/img/wn/${data.icon}.png`, alt="Weather Icon", style="width: 100px;")

                                        // Hourly Forecast
                                        h4 3 Hour Forecast
                                        // Iterate over each hour in the hourly forecast data.
                                        each hour in data.hourlyForecast
                                            div
                                                // Display the weather icon for the hourly forecast.
                                                img(src=`http://openweathermap.org/img/wn/${hour.weather[0].icon}.png`, style="width: 50px;")
                                                // Show the forecasted time and temperature for each hour.
                                                // Temperature unit depends on selectedUnit
                                                span #{new Date(hour.dt * 1000).getHours()}:00 - #{Math.round(hour.main.temp)}°#{selectedUnit === 'metric' ? 'C' : 'F'}
                                        // Form that clears all the cities, from going to the action route in the post method.
                                        form(action="/weather/clear", method="post")
                                            button.btn.btn-danger(type="submit") Clear All Cities
                    .col-md-4
                        // Heading name
                        h4 Cities List
                        // Sort option for the cities table that sorts the name, time, and temperature.
                        div.form-group
                            label(for="sortOptions") Sort by:
                            select#sortOptions(onchange="sortCities(this.selectedIndex)")
                                option(value="0") Name
                                option(value="1") Time
                                option(value="2") Temperature

                        // Table used for the cities, creates it and has the 3 column headings.
                        table#citiesTable.table(style="background-color: white;")
                            thead
                                tr
                                    th City Name
                                    th Time
                                    th Temperature
                            tbody
                                //Loop through this list and display the cities and fetch the corresponding name (hardcoded), time (API), Temperature (API).
                                each data in weatherData
                                    //What happens if an error occurs when gathering the data.
                                    if data.error
                                        tr
                                            td #{data.cityName}
                                            td(colspan="3") Error: #{data.error}
                                        // No error and then it displays all the corresponding information and converts the
                                        // temperature from the unit chosen by user.
                                    else
                                        tr
                                            td #{data.cityName}
                                            td #{data.time}
                                            td #{data.weather} #{Math.round(data.temperature)}#{selectedUnit === 'metric' ? '°C' : '°F'}


            .row.mt-4
                // Recent activity to display on the page beside the carousel.
                .col-md-6.text-center
                    h3 Recent Activity
                    ul.list-group
                        // Display the activities in reverse order for most recent first. (Loops through) As well as
                        // formats the list.
                        each activity in activities.reverse()
                            li.list-group-item
                                | #{activity.date} #{activity.time} - #{activity.method} - #{activity.url}

                // Title for the weather carousel
                .col-md-6.text-center
                    h3 Around the World

                    // Weather Carousel
                    #cityCarousel.carousel.slide(data-bs-ride="carousel")
                        .carousel-inner
                            // Item apart of the carousel that displays the weather image and has the caption of weathers in the world.
                                // Sets the item as active (first)
                            .carousel-item.active
                                img(src="/image/weather_image.png", alt="Weather Image", class="d-block w-100")
                                .carousel-caption.d-none.d-md-block
                                    h5 Weathers In The World

                            // Carousel items displaying different city images with captions of where the city resides.
                            .carousel-item
                                img(src="/image/london.png", class="d-block w-100", alt="London")
                                .carousel-caption.d-none.d-md-block
                                    h5 London, United Kingdom
                            .carousel-item
                                img(src="/image/tokyo.png", class="d-block w-100", alt="Tokyo")
                                .carousel-caption.d-none.d-md-block
                                    h5 Tokyo, Japan
                            .carousel-item
                                img(src="/image/paris.png", class="d-block w-100", alt="Paris")
                                .carousel-caption.d-none.d-md-block
                                    h5 Paris, France
                            .carousel-item
                                img(src="/image/new_york.png", class="d-block w-100", alt="New York")
                                .carousel-caption.d-none.d-md-block
                                    h5 New York, USA
                            .carousel-item
                                img(src="/image/sydney.png", class="d-block w-100", alt="Sydney")
                                .carousel-caption.d-none.d-md-block
                                    h5 Sydney, Australia

                        // Carousel controls for navigating to the previous and next items of the carousel.
                        button.carousel-control-prev(type="button", data-bs-target="#cityCarousel", data-bs-slide="prev")
                            span.carousel-control-prev-icon(aria-hidden="true")
                            span.visually-hidden Previous

                        button.carousel-control-next(type="button", data-bs-target="#cityCarousel", data-bs-slide="next")
                            span.carousel-control-next-icon(aria-hidden="true")
                            span.visually-hidden Next

                // Include the footer of the page
                include footer

        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js")
